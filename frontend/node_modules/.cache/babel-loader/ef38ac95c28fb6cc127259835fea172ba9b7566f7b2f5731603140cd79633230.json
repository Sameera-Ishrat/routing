{"ast":null,"code":"var _jsxFileName = \"/Users/sameeraishrat/Desktop/12-adv-starting-project/frontend/src/components/EventForm.js\",\n  _s = $RefreshSig$();\nimport { Form, useActionData, useNavigate, useNavigation, redirect } from 'react-router-dom';\nimport classes from './EventForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventForm({\n  method,\n  event\n}) {\n  _s();\n  const navigate = useNavigate();\n  const data = useActionData(); // useActionData is used when you want to validate the form from backend\n\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === 'submitting';\n  function cancelHandler() {\n    navigate('..');\n  }\n  return /*#__PURE__*/_jsxDEV(Form, {\n    method: \"POST\",\n    className: classes.form,\n    children: [data && data.errors && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.values(data.errors).map(err => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: err\n      }, err, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"title\",\n        type: \"text\",\n        name: \"title\",\n        required: true,\n        defaultValue: event ? event.title : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"image\",\n        children: \"Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"image\",\n        type: \"url\",\n        name: \"image\",\n        required: true,\n        defaultValue: event ? event.image : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"date\",\n        type: \"date\",\n        name: \"date\",\n        required: true,\n        defaultValue: event ? event.data : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"description\",\n        name: \"description\",\n        rows: \"5\",\n        required: true,\n        defaultValue: event ? event.description : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: cancelHandler,\n        disabled: isSubmitting,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: isSubmitting,\n        children: isSubmitting ? 'Submitting' : 'Save'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(EventForm, \"lkj31A2CAttKPcPDT1ohetNewig=\", false, function () {\n  return [useNavigate, useActionData, useNavigation];\n});\n_c = EventForm;\nexport default EventForm;\nexport const action = async ({\n  request,\n  params\n}) => {\n  const data = await request.formData();\n  const enteredData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    body: JSON.stringify(enteredData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // Form validation from backend 422 is defined at backend\n\n  if (response.status === 422) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      messsage: 'Cannot load new event'\n    }, {\n      status: 500\n    });\n  }\n\n  // redirect to events page after form submission\n\n  return redirect('/events');\n};\n\n// With the help of useNavigation hook ,\n// we can make the button text read to submitting.\n\n/****\n * We are using data = useActionLoader() to validate the input from the backend\n * This data is being validated inside the Form\n * Also in the NewEventPage add this inside the action for input validation\n * if(response.status === 422) {\n  return response;\n}\n * \n */\nvar _c;\n$RefreshReg$(_c, \"EventForm\");","map":{"version":3,"names":["Form","useActionData","useNavigate","useNavigation","redirect","classes","jsxDEV","_jsxDEV","EventForm","method","event","_s","navigate","data","navigation","isSubmitting","state","cancelHandler","className","form","children","errors","Object","values","map","err","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","name","required","defaultValue","title","image","rows","description","actions","onClick","disabled","_c","action","request","params","formData","enteredData","get","date","response","fetch","body","JSON","stringify","headers","status","ok","json","messsage","$RefreshReg$"],"sources":["/Users/sameeraishrat/Desktop/12-adv-starting-project/frontend/src/components/EventForm.js"],"sourcesContent":["import { Form, useActionData, useNavigate, useNavigation,redirect} from 'react-router-dom';\n\nimport classes from './EventForm.module.css';\n\nfunction EventForm({ method, event }) {\n  const navigate = useNavigate();\n\nconst data = useActionData() // useActionData is used when you want to validate the form from backend\n\nconst navigation = useNavigation();\nconst isSubmitting = navigation.state === 'submitting';\n\n\n  function cancelHandler() {\n    navigate('..');\n  }\n\n  return (\n    <Form method='POST' className={classes.form}>\n      {data && data.errors && (<ul>\n        {Object.values(data.errors).map((err) => (\n          <li key = {err}>{err}</li>\n        ))}\n        </ul>) }\n      <p>\n        <label htmlFor=\"title\">Title</label>\n        <input id=\"title\" type=\"text\" name=\"title\" required \n         defaultValue={event ?  event.title : ''}/>\n      </p>\n      <p>\n        <label htmlFor=\"image\">Image</label>\n        <input id=\"image\" type=\"url\" name=\"image\" required\n        defaultValue={event ? event.image : ''}\n        />\n      </p>\n      <p>\n        <label htmlFor=\"date\">Date</label>\n        <input id=\"date\" type=\"date\" name=\"date\" required \n        defaultValue={event ? event.data : ''}\n        />\n      </p>\n      <p>\n        <label htmlFor=\"description\">Description</label>\n        <textarea id=\"description\" name=\"description\" rows=\"5\" required \n        defaultValue={event ? event.description : ''}\n        />\n      </p>\n      <div className={classes.actions}>\n        <button type=\"button\" onClick={cancelHandler} disabled = {isSubmitting}>\n          Cancel\n        </button>\n        <button disabled={isSubmitting}>\n         {isSubmitting ? 'Submitting' : 'Save'} \n          </button>\n      </div>\n    </Form>\n  );\n}\n\nexport default EventForm;\n\n\nexport const action = async({request , params}) => {\n  const data = await request.formData();\n  \n  const enteredData = {\n    title : data.get('title'),\n    image : data.get('image'),\n    date : data.get('date'),\n    description : data.get('description')\n  }\n  \n  const response = await fetch('http://localhost:8080/events',{\n    method : 'POST',\n    body : JSON.stringify(enteredData),\n    headers :{\n      'Content-Type' : 'application/json',\n    }\n  })\n  \n  // Form validation from backend 422 is defined at backend\n  \n  if(response.status === 422) {\n    return response;\n  }\n  \n  if(!response.ok) {\n    throw json({messsage:'Cannot load new event'} , {status:500})\n  }\n  \n  // redirect to events page after form submission\n  \n  return redirect('/events');\n  }\n\n\n\n\n\n\n// With the help of useNavigation hook ,\n// we can make the button text read to submitting.\n\n/****\n * We are using data = useActionLoader() to validate the input from the backend\n * This data is being validated inside the Form\n * Also in the NewEventPage add this inside the action for input validation\n * if(response.status === 422) {\n  return response;\n}\n * \n */"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}