{"ast":null,"code":"var _jsxFileName = \"/Users/sameeraishrat/Desktop/12-adv-starting-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\n// import React,{useState,useEffect} from 'react';\nimport EventsList from \"../components/EventsList\";\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  //  const events =  useLoaderData();\n  // const data = useLoaderData();\n  // const events = data.events;\n\n  // console.log(data,\"DATA\")\n  // console.log(events,\"EVENTS\");\n  const {\n    events\n  } = useLoaderData();\n  return;\n  /*#__PURE__*/_jsxDEV(Await, {\n    response: events,\n    children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadeEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 20\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 4\n  }, this);\n\n  // <EventsList events={events} />\n};\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadeEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n    //throw new Response(JSON.stringify({message:'Could not fetch events'},{status: 500}))\n  } else {\n    return response;\n    // const resData = await response.json();\n    // console.log(resData,\"data\");\n    // return resData.events;\n  }\n}\n\nexport function loader() {\n  return defer({\n    event: loadeEvents()\n  });\n}\n\n// export async function loader() {\n\n//     const response = await fetch('http://localhost:8080/events');\n\n//     if(!response.ok) {\n//     throw json({message:'Could not fetch events'} , {status:500})\n// //throw new Response(JSON.stringify({message:'Could not fetch events'},{status: 500}))\n\n// }else {\n//       return response;\n//       // const resData = await response.json();\n//       // console.log(resData,\"data\");\n//       // return resData.events;\n\n//     }\n\n// }\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","json","defer","Await","jsxDEV","_jsxDEV","EventsPage","_s","events","response","children","loadedEvents","loadeEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","fetch","ok","message","status","loader","event","$RefreshReg$"],"sources":["/Users/sameeraishrat/Desktop/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["// import React,{useState,useEffect} from 'react';\nimport EventsList from \"../components/EventsList\";\nimport { useLoaderData ,json,defer,Await } from 'react-router-dom';\n\nconst EventsPage = () => {\n\n//  const events =  useLoaderData();\n// const data = useLoaderData();\n// const events = data.events;\n\n// console.log(data,\"DATA\")\n// console.log(events,\"EVENTS\");\nconst {events} = useLoaderData();\n  return\n   <Await response={events}>\n{(loadedEvents) => <EventsList events={loadeEvents} /> }\n  </Await>\n \n    // <EventsList events={events} />\n    \n  \n}\n\nexport default EventsPage\n\nasync function loadeEvents() {\n  const response = await fetch('http://localhost:8080/events');\n\n    if(!response.ok) {\n    throw json({message:'Could not fetch events'} , {status:500})\n//throw new Response(JSON.stringify({message:'Could not fetch events'},{status: 500}))\n   \n}else {\n      return response;\n      // const resData = await response.json();\n      // console.log(resData,\"data\");\n      // return resData.events;\n      \n    }\n}\n\nexport function loader() {\n  return defer({\n    event : loadeEvents()\n  })\n}\n\n// export async function loader() {\n  \n//     const response = await fetch('http://localhost:8080/events');\n\n//     if(!response.ok) {\n//     throw json({message:'Could not fetch events'} , {status:500})\n// //throw new Response(JSON.stringify({message:'Could not fetch events'},{status: 500}))\n   \n// }else {\n//       return response;\n//       // const resData = await response.json();\n//       // console.log(resData,\"data\");\n//       // return resData.events;\n      \n//     }\n\n// }"],"mappings":";;AAAA;AACA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,EAAEC,IAAI,EAACC,KAAK,EAACC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEzB;EACA;EACA;;EAEA;EACA;EACA,MAAM;IAACC;EAAM,CAAC,GAAGR,aAAa,CAAC,CAAC;EAC9B;EACC,aAAAK,OAAA,CAACF,KAAK;IAACM,QAAQ,EAAED,MAAO;IAAAE,QAAA,EACzBC,YAAY,iBAAKN,OAAA,CAACN,UAAU;MAACS,MAAM,EAAEI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;;EAEN;AAGJ,CAAC;AAAAT,EAAA,CAjBKD,UAAU;EAAA,QAQCN,aAAa;AAAA;AAAAiB,EAAA,GARxBX,UAAU;AAmBhB,eAAeA,UAAU;AAEzB,eAAeM,WAAWA,CAAA,EAAG;EAC3B,MAAMH,QAAQ,GAAG,MAAMS,KAAK,CAAC,8BAA8B,CAAC;EAE1D,IAAG,CAACT,QAAQ,CAACU,EAAE,EAAE;IACjB,MAAMlB,IAAI,CAAC;MAACmB,OAAO,EAAC;IAAwB,CAAC,EAAG;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;IACjE;EAEA,CAAC,MAAK;IACA,OAAOZ,QAAQ;IACf;IACA;IACA;EAEF;AACJ;;AAEA,OAAO,SAASa,MAAMA,CAAA,EAAG;EACvB,OAAOpB,KAAK,CAAC;IACXqB,KAAK,EAAGX,WAAW,CAAC;EACtB,CAAC,CAAC;AACJ;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AAAA,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}