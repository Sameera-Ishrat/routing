{"ast":null,"code":"var _jsxFileName = \"/Users/sameeraishrat/Desktop/12-adv-starting-project/frontend/src/App.js\";\n// Challenge / Exercise\n\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/EventsPage\";\nimport EventsDetailPage, { loader as eventsDetailsLoader } from \"./pages/EventsDetailPage\";\nimport NewEventPage from \"./pages/NewEventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\nimport Root from \"./pages/Root\";\nimport Error from \"./pages/Error\";\nimport EventsRoot from \"./pages/EventsRoot\";\nimport { action as newAndEditEventAction } from \"./components/EventForm\";\nimport Newsletter, { action as newsletterAction } from \"./pages/NewLetter\";\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 14\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 19\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 31\n    }, this)\n  },\n  //   {path : 'events' , element : <EventsRoot />,  \n  //   children : [\n  //     {index:true , element : <EventsPage />,loader : eventsLoader ,},\n  //     {path:':eventId' , element : <EventsDetailPage />,loader : eventsDetailsLoader},\n  //     {path:'new-event' , element : <NewEventPage />},\n  //     {path:':eventId/edit' , element : <EditEventPage />},\n  //   ]\n  // }\n  {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventsRoot, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 32\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 29\n      }, this),\n      loader: eventsLoader\n    }, {\n      path: ':eventId',\n      loader: eventsDetailsLoader,\n      id: 'event-details',\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventsDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 27\n        }, this)\n      }, {\n        path: 'edit',\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 28\n        }, this),\n        action: newAndEditEventAction\n      }]\n    },\n    // {path:'new-event' , element : <NewEventPage /> , action:newEventAction}, \n    {\n      path: 'new-event',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 31\n      }, this),\n      action: newAndEditEventAction\n    }]\n  }, {\n    path: 'newsletter',\n    element: /*#__PURE__*/_jsxDEV(Newsletter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }, this),\n    action: newsletterAction\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\n\n/*****\n * Since both EventsDetailsPage and EditEventPage share same props and we \n * have to load similar data in both, we have to create a separate but same\n * loader function for EditEventPage. In order to avoid that, we\n * can create a nested layout as a\n * loader : eventsDetailsLoader,\n * id:'event-id',\nchildren : [\n  {path:':eventId' , element : <EventsDetailPage />},\n  {path:':eventId/edit' , element : <EditEventPage />},\n]\nAbove the loader is shared in chidren components like EventsDetailsPage and \nEditEventPage\n\n*** We have to use useRouteLoaderData('event-id') instead of useLoaderData\n */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["RouterProvider","createBrowserRouter","Home","EventsPage","loader","eventsLoader","EventsDetailPage","eventsDetailsLoader","NewEventPage","EditEventPage","Root","Error","EventsRoot","action","newAndEditEventAction","Newsletter","newsletterAction","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","index","id","App","_c","$RefreshReg$"],"sources":["/Users/sameeraishrat/Desktop/12-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport EventsPage,{loader as eventsLoader} from \"./pages/EventsPage\";\nimport EventsDetailPage , {loader as eventsDetailsLoader ,} from \"./pages/EventsDetailPage\";\nimport NewEventPage from \"./pages/NewEventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\nimport Root from \"./pages/Root\";\nimport Error from \"./pages/Error\";\nimport EventsRoot from \"./pages/EventsRoot\";\nimport {action as newAndEditEventAction} from \"./components/EventForm\";\nimport Newsletter, { action as newsletterAction } from \"./pages/NewLetter\";\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\n\nconst router = createBrowserRouter([\n  {path : '/' ,\n   element : <Root />,\n   errorElement : <Error />,\n   children : [\n    {index : true , element : <Home />},\n\n  //   {path : 'events' , element : <EventsRoot />,  \n  //   children : [\n  //     {index:true , element : <EventsPage />,loader : eventsLoader ,},\n  //     {path:':eventId' , element : <EventsDetailPage />,loader : eventsDetailsLoader},\n  //     {path:'new-event' , element : <NewEventPage />},\n  //     {path:':eventId/edit' , element : <EditEventPage />},\n  //   ]\n  // }\n  {path : 'events' , element : <EventsRoot />,\n  children : [\n    {index:true , element : <EventsPage />,loader : eventsLoader ,},\n{path : ':eventId',\nloader : eventsDetailsLoader,\nid:'event-details',\nchildren : [\n  {index:true , element : <EventsDetailPage />},\n  {path:'edit' , element : <EditEventPage />, action:newAndEditEventAction},\n  \n]\n},\n// {path:'new-event' , element : <NewEventPage /> , action:newEventAction}, \n{path:'new-event' , element : <NewEventPage /> , action:newAndEditEventAction},   \n]\n},\n {path:'newsletter',element:<Newsletter />,action : newsletterAction}  \n\n]\n  },\n \n  \n])\nfunction App() {\n  return <RouterProvider router={router}></RouterProvider>;\n}\n\nexport default App;\n\n/*****\n * Since both EventsDetailsPage and EditEventPage share same props and we \n * have to load similar data in both, we have to create a separate but same\n * loader function for EditEventPage. In order to avoid that, we\n * can create a nested layout as a\n * loader : eventsDetailsLoader,\n * id:'event-id',\nchildren : [\n  {path:':eventId' , element : <EventsDetailPage />},\n  {path:':eventId/edit' , element : <EditEventPage />},\n]\nAbove the loader is shared in chidren components like EventsDetailsPage and \nEditEventPage\n\n*** We have to use useRouteLoaderData('event-id') instead of useLoaderData\n */"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}